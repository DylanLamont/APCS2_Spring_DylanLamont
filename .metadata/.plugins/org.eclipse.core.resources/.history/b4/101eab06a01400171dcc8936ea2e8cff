package textExcel;
import java.util.*;

public class FormulaCell extends RealCell{

	private String cellText;
	@Override
	public String abbreviatedCellText() {
		String abbCellText = getDoubleValue() +"";
		
		if (abbCellText.length() > 10){
			return abbCellText.substring(0,10);  //shorten's formula to being a 10 spaced value

		}else {
			String returnStr = abbCellText;
			while (returnStr.length() < 10){		// adds spaces in order to fill 10 chars, also if length is 10, falls to printing value
				returnStr += " ";
			}
			return (returnStr);
		}
	}

	@Override
	public String fullCellText() {
		return super.fullCellText();				//returns true value of formula cell using super method
	}
	
	public FormulaCell (String enteredForm){
		super(enteredForm);							//constructor to fill super's String field (accesses by fullCellText)
		for (int i = 0; i < this.fullCellText().length(); i++){
			if (!(fullCellText().charAt(i) == ' ')){
				cellText += fullCellText().charAt(i);
			}
		}
	}

	public String getType(){
		return "FormulaCell";						//returns type of cell
	}
	
	public double getDoubleValue (){
		cellText = cellText.substring(1, cellText.length()-1);
		ArrayList<String> operators = new ArrayList<String>();
		ArrayList<Double> operands = new ArrayList<Double>();
		ArrayList<String> locations = new ArrayList<String>();
		for (int i = 0; i < cellText.length(); i++){
			if ((cellText.charAt(i) == '+' ||cellText.charAt(i) == '-'||cellText.charAt(i) == '*' ||cellText.charAt(i) == '/')){
				operators.add(cellText.charAt(i) + "");
			} else {
				String value = cellText.substring(i, cellText.indexOf(' '));
				operands.add(Double.parseDouble(value));
			}
		}
		double returnVal = operands.get(0);
		for (int i = 0; i < operators.size(); i++){
			if (operators.get(i).equalsIgnoreCase("+")){
				returnVal += operands.get(i+1);
			} else if (operators.get(i).equalsIgnoreCase("-")){
				returnVal -= operands.get(i+1);
			} else if (operators.get(i).equalsIgnoreCase("*")){
				returnVal *= operands.get(i+1);
			} else if (operators.get(i).equalsIgnoreCase("/")){
				returnVal /= operands.get(i+1);
			}
		}
		return returnVal;
	}
}
